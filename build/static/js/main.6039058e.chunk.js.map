{"version":3,"sources":["components/Axes.tsx","components/Bar.tsx","components/TimeChart.tsx","components/Homework.tsx","hooks/useReadData.ts","App.tsx","reportWebVitals.js","index.js"],"names":["Wrapper","styled","div","Labels","Border","props","height","Label","left","Axes","timeData","totalWidth","children","labels","Set","tasks","forEach","task","add","start","duration","labelsArray","Array","from","map","label","StyledBar","backgroundColor","top","width","clicked","Bar","useState","setClicked","onClick","currentValue","TimeChart","Number","MAX_SAFE_INTEGER","end","currentTop","currentHue","Math","random","bars","index","length","color","task_id","Homework","url","status","setStatus","setTimeData","useEffect","fetchData","a","fetch","response","json","data","useReadData","acceptedParams","App","timeDataUrl","URLSearchParams","window","location","search","get","protocol","hostname","port","pathname","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6039058e.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\nimport { TimeData } from \"../types/timeData\";\r\nimport React from \"react\";\r\n\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nconst Labels = styled.div`\r\n  height: 24px;\r\n  width: 100%;\r\n`;\r\n\r\nconst Border = styled.div<{ height: number }>`\r\n  position: relative;\r\n  outline: 1px solid black;\r\n  width: 100%;\r\n  height: ${(props) => props.height}px;\r\n`;\r\n\r\n// TODO: move the first and last labels so that they do not overrun the edges\r\nconst Label = styled.div<{ left: string }>`\r\n  position: absolute;\r\n  transform: translateX(-50%);\r\n  left: ${(props) => props.left};\r\n  top: 0;\r\n`;\r\n\r\ninterface Props {\r\n  timeData: TimeData;\r\n  height: number;\r\n  totalWidth: number;\r\n  children: React.ReactElement[];\r\n}\r\n\r\n/**\r\n * Renders the labels and axes for the time chart\r\n */\r\nconst Axes = ({ timeData, height, totalWidth, children }: Props) => {\r\n  const labels = new Set<number>();\r\n\r\n  // Add time labels to a set to prevent duplicates\r\n  // TODO: Ensure that closely-packed labels do not overrun each other\r\n  timeData.tasks.forEach((task) => {\r\n    labels.add(task.start);\r\n    labels.add(task.start + task.duration);\r\n  });\r\n\r\n  const labelsArray = Array.from(labels);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Labels>\r\n        {labelsArray.map((label) => (\r\n          <Label left={(label / totalWidth) * 100 + \"%\"} key={label}>\r\n            {label}\r\n          </Label>\r\n        ))}\r\n      </Labels>\r\n      <Border height={height}>{children}</Border>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Axes;\r\n","import { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TRANSITION_TIME = \"300ms\";\r\n\r\nconst StyledBar = styled.div<{\r\n  backgroundColor: string;\r\n  top: number;\r\n  height: number;\r\n  left: string;\r\n  width: string;\r\n  clicked: boolean;\r\n}>`\r\n  position: absolute;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 8px;\r\n  background-color: ${(props) => props.backgroundColor};\r\n  top: ${(props) => props.top}px;\r\n  height: ${(props) => props.height}px;\r\n  left: ${(props) => props.left};\r\n  width: ${(props) => props.width};\r\n  cursor: pointer;\r\n  opacity: 0.9;\r\n  transition: all ${TRANSITION_TIME};\r\n  // Changes color by increasing the saturation when the bar is clicked\r\n  filter: ${(props) => (props.clicked ? \"saturate(2)\" : \"none\")};\r\n  box-sizing: border-box;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n`;\r\n\r\ninterface Props {\r\n  backgroundColor: string;\r\n  height: number; // expects a pixel value\r\n  top: number; // expects a pixel value\r\n  left: string; // expects a percentage\r\n  width: string; // expects a percentage\r\n  label: string;\r\n}\r\n\r\n/**\r\n * This component draws a bar for a chart based on the supplied location and color.\r\n * Uses percentages for the horizontal metrics to allow for responsiveness.\r\n */\r\nconst Bar = ({ backgroundColor, top, height, left, width, label }: Props) => {\r\n  const [clicked, setClicked] = useState(false);\r\n\r\n  const handleClick = () => {\r\n    setClicked((currentValue) => !currentValue);\r\n  };\r\n\r\n  return (\r\n    <StyledBar\r\n      onClick={handleClick}\r\n      backgroundColor={backgroundColor}\r\n      top={top}\r\n      height={height}\r\n      left={left}\r\n      width={width}\r\n      clicked={clicked}\r\n    >\r\n      {label}\r\n    </StyledBar>\r\n  );\r\n};\r\n\r\nexport default Bar;\r\n","import { TimeData } from \"../types/timeData\";\r\nimport Axes from \"./Axes\";\r\nimport Bar from \"./Bar\";\r\n\r\nconst VERTICAL_SPACING = 8;\r\nconst HEIGHT = 24;\r\n\r\ninterface Props {\r\n  timeData: TimeData;\r\n}\r\n\r\n/**\r\n * Draws a time chart with axes and a bar for each task.\r\n */\r\nconst TimeChart = ({ timeData }: Props) => {\r\n  let start = Number.MAX_SAFE_INTEGER;\r\n  let end = 0;\r\n\r\n  // Get the start and end values for the chart\r\n  timeData.tasks.forEach((task) => {\r\n    if (task.start < start) {\r\n      start = task.start;\r\n    }\r\n    if (task.duration + task.start > end) {\r\n      end = task.duration + task.start;\r\n    }\r\n  });\r\n\r\n  const totalWidth = end - start;\r\n  let currentTop = VERTICAL_SPACING;\r\n  let currentHue = Math.random() * 255;\r\n\r\n  const bars = timeData.tasks.map((task, index) => {\r\n    // Calculate horizontal metrics as percentages to allow for responsiveness\r\n    const left = ((task.start - start) / totalWidth) * 100;\r\n    const width = (task.duration / totalWidth) * 100;\r\n    currentTop = VERTICAL_SPACING + index * (HEIGHT + VERTICAL_SPACING);\r\n\r\n    // Rotate through hues to get some color separation for the bars\r\n    // TODO: Use d3-color or improve algorithm\r\n    currentHue = (currentHue + 128 + 255 / timeData.tasks.length) % 255;\r\n    const color = `hsl(${currentHue}, 50%, 50%)`;\r\n\r\n    return (\r\n      <Bar\r\n        backgroundColor={color}\r\n        height={HEIGHT}\r\n        left={left + \"%\"}\r\n        width={width + \"%\"}\r\n        label={task.task_id}\r\n        top={currentTop}\r\n        key={task.task_id}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Axes\r\n      timeData={timeData}\r\n      totalWidth={totalWidth}\r\n      height={currentTop + HEIGHT + 2 * VERTICAL_SPACING}\r\n    >\r\n      {bars}\r\n    </Axes>\r\n  );\r\n};\r\n\r\nexport default TimeChart;\r\n","import { useReadData } from \"../hooks/useReadData\";\r\nimport TimeChart from \"./TimeChart\";\r\n\r\ninterface Props {\r\n  url: string;\r\n}\r\n\r\n/**\r\n * Wrapper component for this homework task\r\n * It reads the data from a JSON file and renders a time chart\r\n */\r\nconst Homework = ({ url }: Props) => {\r\n  const { status, timeData } = useReadData(url);\r\n\r\n  // TODO: nicer loading and error messaging\r\n  return (\r\n    <div>\r\n      {status === \"loading\" ? (\r\n        \"Loading\"\r\n      ) : timeData ? (\r\n        <TimeChart timeData={timeData} />\r\n      ) : (\r\n        \"No data\"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Homework;\r\n","import { useEffect, useState } from \"react\";\r\nimport { TimeData } from \"../types/timeData\";\r\n\r\n// Loading states when fetching the data\r\nexport type Status = \"idle\" | \"loading\" | \"complete\" | \"error\";\r\n\r\ninterface UseReadDataResponse {\r\n  status: Status;\r\n  timeData?: TimeData;\r\n}\r\n\r\n/**\r\n * Hook to read the time data from a JSON file on a URL\r\n */\r\nexport const useReadData: (url: string) => UseReadDataResponse = (url) => {\r\n  const [status, setStatus] = useState<Status>(\"idle\");\r\n  const [timeData, setTimeData] = useState<TimeData>();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setStatus(\"loading\");\r\n      try {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        setTimeData(data);\r\n        setStatus(\"complete\");\r\n      } catch (e) {\r\n        setStatus(\"error\");\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [url]);\r\n\r\n  return { status, timeData };\r\n};\r\n","import styled from \"styled-components\";\nimport \"./App.css\";\nimport Homework from \"./components/Homework\";\n\nconst acceptedParams = { timeDataUrl: \"time_data_url\" };\nconst DEFAULT_PATH = \"/default.json\";\n\nconst Wrapper = styled.div`\n  padding: 16px;\n`;\n\nconst App = () => {\n  const params = new URLSearchParams(window.location.search);\n\n  // If no URL for the time data is provided, then get data from the default path\n  // TODO: Make the URL generation cleaner\n  // TODO: sanitize input\n  const timeDataUrl =\n    params.get(acceptedParams.timeDataUrl) ??\n    window.location.protocol +\n      \"//\" +\n      window.location.hostname +\n      \":\" +\n      window.location.port +\n      window.location.pathname +\n      DEFAULT_PATH;\n\n  return (\n    <Wrapper>\n      <Homework url={timeDataUrl} />\n    </Wrapper>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}